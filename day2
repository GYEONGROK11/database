SELECT *
FROM address
WHERE city_id = 1 OR city_id = 2 ;

SELECT *
FROM address
WHERE city_id IN(1,2) ;

SELECT *
FROM person
WHERE lname = 'Smith';

SELECT *
FROM person
ORDER BY person_id DESC;

SELECT *
FROM person
ORDER BY lname ASC;


DELETE from favorite_food;


INSERT INTO favorite_food
(person_id,food)
VALUES
  (1,'pizza')
, (1,'cookies')
, (1,'nachos');


INSERT INTO person
(person_id,fname, lname, eye_color, birth_date
, street, city,state, country, postal_code)
VALUES
(3,'Jackson', 'Jacob', 'GR', '1976-11-22'
, '23 Maple St.', 'Arlington', 'VA', 'USA', '20220');

UPDATE person
SET eye_color = 'ZZ'  -- CHECK 연산자 위반
WHERE person_id = 1;

SELECT STR_TO_DATE('dec-21-1980','%b-%d-%Y');
SELECT NOW();  -- 2023/10/30
SELECT DATE_FORMAT(NOW(),'%Y/%m/%d');

SELECT birth_date, DATE_FORMAT(birth_date,'%Y/%m/%d')
FROM person;

-- SAKILA 데이터베이스 사용

USE sakila;

SELECT * FROM film;

SHOW TABLES;
DESC film;


-- customer 테이블에서 라스트 네임이 지글라인 사람을 찾아라(없음)

SELECT * FROM customer
WHERE last_name ='ZIEGLER';

-- customer 테이블에서 비활성화된 고객을 찾아라

SELECT * FROM customer
WHERE ACTIVE = 0;

SELECT * 
FROM customer
WHERE ACTIVE = 1
GROUP BY store_id
HAVING COUNT(*) >= 200
ORDER BY customer_id DESC
LIMIT 3;  -- 레코드 수 제한  EX) 게시물페이지 처리

-- select 절
SELECT first_name,last_name,store_id
FROM customer;

SELECT language_id AS id, NAME as my_name, 'common' as typ ,1 AS num
, UPPER(NAME) AS 대문자,LOWER(NAME), 2*2,1+1
FROM language;

-- 배우의 라스트 네임이 akroyd인 사람을 찾는다

SELECT DISTINCT last_name  -- DISTINCT 해당 컬럼 중복제거
FROM actor
WHERE last_name = 'AKROYD';

SELECT DISTINCT actor_id  -- PK에 DISTINCT 적어봤자 중복제거 안됨
FROM film_actor;


-- 파생테이블 (컬럼명 full name)

SELECT CONCAT(A.first_name, ' ', A.last_name,'입니다') AS full_name
FROM (SELECT first_name, last_name, email 
	FROM customer
	WHERE first_name = 'JESSIE') AS A;  -- 오라클에선 AS 생략 
						-- ()안은 임시(파생) 테이블  테이블 이름은 A  


CREATE TEMPORARY TABLE actors_j
(
	  actor_id SMALLINT(5)
	, first_name VARCHAR(45)
	, last_name VARCHAR(45)
);               -- 임시테이블 생성   데이터베이스 연결해제하면 테이블 사라짐

SELECT * FROM actors_j;

INSERT INTO actors_j
SELECT actor_id, first_name, last_name
FROM actor;

-- 가상 뷰 view 테이블 처럼 동작하지만 데이터가 저장되진 않음 (명령어 저장)
-- CREATE VIEW view_custormer_1 AS 
SELECT customer_id, first_name, last_name, ACTIVE
FROM customer
WHERE customer_id <10;

SELECT * FROM view_custormer_1
WHERE customer_id <10;

-- actor, film, film_actor 조인 

SELECT DISTINCT actor_id 
FROM film_actor;


SELECT A.first_name, A.last_name
, FA.actor_id, FA.film_id
, F.title
FROM film_actor AS FA
INNER JOIN actor A
ON FA.actor_id = A.actor_id
JOIN film F
ON FA.film_id = F.film_id
ORDER BY FA.actor_id;

UPDATE actor
SET first_name = 'PENELOPA'
WHERE actor_id = 1;

/* 1 rating 값이 'G'면서 rental_duration인 7일 이상  영화 리스트
   2 영화 제목만 나타내시오
   3 rating 값이 'G'면서 rental_duration인 7일 이상 리스트와 
	  rating 값이 'PG-13'면서 rental_duration 4일 미만 리스트
*/

SELECT *
FROM film
WHERE rating ='G' AND rental_duration>=7;

SELECT title
FROM film
WHERE rating ='G' AND rental_duration>=7;

SELECT title, rating, rental_duration
FROM film
WHERE (rating ='G' AND rental_duration>=7) 
OR (rating ='PG-13' AND rental_duration<4)
ORDER BY RATING;


-- GROUP BY절 그룹함수 Group Function sum, min, max, count, avg

SELECT SUM(amount), MAX(amount), MIN(amount), COUNT(*), AVG(amount), SUM(amount)/COUNT(*)
FROM payment;

SELECT *
FROM payment
GROUP BY customer_id;

-- 고객마다 사용 금액이 궁금함

SELECT customer_id, SUM(amount) AS 사용금액 , AVG(amount) 평균,COUNT(customer_id)구매횟수
FROM payment
GROUP BY customer_id
ORDER BY 사용금액 DESC;

-- 고객마다 사용 금액 중 사용금액이 100달러 이상인 고객이 궁금함

SELECT customer_id, SUM(amount) AS sum_amount
FROM payment
GROUP BY customer_id
HAVING sum_amount >=150  -- GROUP BY의 조건
ORDER BY sum_amount DESC;

-- 스텝마다의 총 판매금액 평균판매금액

SELECT staff_id, SUM(amount) 판매금액, AVG(amount) 평균
FROM payment
GROUP BY staff_id;

SELECT *
FROM rental;

SELECT DATE(rental_date),TIME(rental_date), rental_date   -- 이렇게 쓸거면 처음부터 따로 저장 (정규화)
FROM rental;

SELECT *
FROM rental
WHERE  DATE(rental_date) = '2005-05-24';

-- 2005년 06 14일에 렌탈한 고객의 first_name, last_name, rental_date 나타냄
 
SELECT ct.first_name, ct.last_name, time(rt.rental_date)
FROM rental AS rt
JOIN customer AS ct
ON  rt.customer_id = ct.customer_id
WHERE DATE(rt.rental_date) = '2005-06-14'
ORDER BY rt.rental_date;

-- p101 실습문제
SELECT *
FROM actor;

SELECT actor_id, first_name, last_name
FROM actor
ORDER BY last_name, first_name;

SELECT actor_id, first_name, last_name
FROM actor
WHERE last_name IN ('WILLIAMS','DAVIS');

SELECT customer_id
FROM rental
WHERE DATE(rental_date) = '2005-07-05'
ORDER BY customer_id;

SELECT c.email, r.return_date
FROM customer c
INNER JOIN rental r
ON c.customer_id = r.customer_id
WHERE DATE(r.rental_date) = '2005-06-14voard'
ORDER BY r.return_date DESC;

USE voard_ver1;
CREATE TABLE board(
	  iboard INT UNSIGNED AUTO_INCREMENT PRIMARY KEY  --  AUTO_INCREMENT  pk값 자동증가
	, title VARCHAR(100) NOT NULL 
	, ctnts VARCHAR(1000) NOT NULL 
	, writer VARCHAR(30) NOT NULL 
	, created_at DATETIME DEFAULT NOW()
	, updated_at DATETIME DEFAULT NOW()
);
